# TODO automate this
# kubectl apply -f https://raw.githubusercontent.com/tektoncd/catalog/main/task/git-clone/0.5/git-clone.yaml
# kubectl create secret generic -n tekton-pipelines kube-config --from-file=$PWD/../metal/kubeconfig.yaml
# kubectl create secret generic -n tekton-pipelines terraform-env-vars \
# --from-literal=CLOUDFLARE_EMAIL=xxx@yyy.com \
# --from-literal=CLOUDFLARE_API_KEY=xxx \
# --from-literal=B2_APPLICATION_KEY_ID=xxx \
# --from-literal=B2_APPLICATION_KEY=xxx \
# --from-literal=TF_VAR_cloudflare_account_id=xxx

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: terraform-external
spec:
  workspaces:
    - name: source
  stepTemplate:
    envFrom:
      - secretRef:
          name: terraform-env-vars
    volumeMounts:
      - name: terraform-credentials
        mountPath: /root/.terraform.d/
  volumes:
    - name: terraform-credentials
      secret:
        secretName: terraform-credentials
  steps:
    - name: lint
      image: hashicorp/terraform:1.1.2
      workingDir: $(workspaces.source.path)/external
      command:
        - terraform
      args:
        - fmt
        - -recursive
        - -diff
        - -check
    - name: init
      image: hashicorp/terraform:1.1.2
      workingDir: $(workspaces.source.path)/external
      command:
        - terraform
      args:
        - init
    - name: plan
      image: hashicorp/terraform:1.1.2
      workingDir: $(workspaces.source.path)/external
      command:
        - terraform
      args:
        - plan
    - name: apply
      image: hashicorp/terraform:1.1.2
      workingDir: $(workspaces.source.path)/external
      command:
        - terraform
      args:
        - apply
        - -auto-approve
